class a{constructor(e){this.interval=e,this.max=e.end,this.left=null,this.right=null}}class h{constructor(){this.root=null}insert(e){if(!this.root){this.root=new a(e);return}let t=this.root;for(;;)if(t.max=Math.max(t.max,e.end),e.start<t.interval.start){if(!t.left){t.left=new a(e);break}t=t.left}else{if(!t.right){t.right=new a(e);break}t=t.right}}query(e){let t=this.root;for(;t;){if(e>=t.interval.start&&e<=t.interval.end)return!0;t.left&&e<=t.left.max?t=t.left:t=t.right}return!1}}let o;async function c(){try{const e=await fetch("https://raw.githubusercontent.com/josephrocca/is-vpn/main/vpn-or-datacenter-ipv4-ranges.txt",{signal:AbortSignal.timeout(2e4)}).then(t=>t.text()).then(t=>t.trim().split(`
`));o=new h,await f(e)}catch(e){console.error("Error updating list:",e)}}async function f(r,e=500){const t=r.length;let n=0;for(;n<t;){const i=r.slice(n,n+e);await new Promise(s=>{setTimeout(()=>{i.map(d).forEach(u=>o.insert(u)),n+=e,s()},0)})}}c().catch(r=>console.error("Initial update failed:",r));setInterval(()=>{c().catch(r=>console.error("Periodic update failed:",r))},1e3*60*60*12);function l(r){return r.split(".").reduce((e,t)=>(e<<8)+parseInt(t,10),0)}function d(r){const[e,t]=r.split("/"),n=l(e),i=n,s=n|(1<<32-t)-1;return{start:i,end:s}}function p(r){const e=l(r);return o.query(e)}export{p as isVpn};
